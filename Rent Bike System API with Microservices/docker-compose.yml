version: '3.8'
services:
  register-server:
    container_name: register-server
    build:
      context: ./register-server
      dockerfile: Dockerfile
    ports:
      - "8761:8761"
    networks:
      - network-system

  api-gateway:
    container_name: api-gateway
    build:
      context: ./api-gateway
      dockerfile: Dockerfile
    ports:
      - "9090:9090"
    environment:
      - eureka.client.service-url.defaultZone=http://register-server:8761/eureka
    depends_on:
      - register-server
    networks:
      - network-system

  auth-server:
    container_name: auth-server
    build:
      context: ./auth-server
      dockerfile: Dockerfile
    ports:
      - "9095:9095"
    environment:
      - eureka.client.service-url.defaultZone=http://register-server:8761/eureka
    depends_on:
      - register-server
      - api-gateway
      - //user
      - jwtserver
    deploy:
      mode: replicated
      replicas: 2
    networks:
      - network-system


  bike-server:
    container_name: bike-server
    build:
      context: ./BikeService
      dockerfile: Dockerfile
    networks:
      - network-system
    environment:
      - eureka.client.service-url.defaultZone=http://register-server:8761/eureka
      - spring.datasource.url=jdbc:postgresql://postgres-sql-db:5432/bike
      - spring.datasource.username=postgres
      - spring.datasource.password=postgres
      - spring.kafka.consumer.bootstrap-servers=kafka:9092
    deploy:
      mode: replicated
      replicas: 4

    depends_on:
      - register-server
      - api-gateway
      - postgres-sql-db
      - kafka
    ports:
      - "8000:8000"

  zookeeper:
    image: 'zookeeper:latest'
    container_name: zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - "2181:2181"


  kafka:
    image: 'apache/kafka:latest'
    container_name: kafka
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://localhost:9092
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    networks:
      - network-system

  postgres-sql-db:
    container_name: postgres-sql-db
    image: postgres:14.5
    environment:
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_USER=postgres
      - POSTGRES_DB=bike
    ports:
      - "5432:5432"
    networks:
      - network-system
    volumes:
      - postgres_data:/var/lib/postgres-sql
      -
  Jwt-server:
    container_name: Jwt-server
    build:
      context: ./JWT-server
      dockerfile: Dockerfile
    networks:
      - network-system
    environment:
      - eureka.client.service-url.defaultZone=http://register-server:8761/eureka
      - spring.datasource.url=jdbc:postgresql://postgres-sql-db:5432/bike
      - spring.datasource.username=postgres
      - spring.datasource.password=postgres

    deploy:
      mode: replicated
      replicas: 5

    depends_on:
      - register-server
      - api-gateway
      - postgres-sql-db
    ports:
      - "8090:8090"


  User-server:
    container_name: User-server
    build:
      context: ./UserService
      dockerfile: Dockerfile
    networks:
      - network-system
    environment:
      - eureka.client.service-url.defaultZone=http://register-server:8761/eureka
      - spring.datasource.url=jdbc:postgresql://postgres-sql-db:5432/bike
      - spring.datasource.username=postgres
      - spring.datasource.password=postgres
    deploy:
      mode: replicated
      replicas: 4

    depends_on:
      - register-server
      - api-gateway
      - postgres-sql-db
    ports:
      - "8060:8060"

networks:
  network-system:
    name:  network-system


volumes:
  postgres_data:
      name: postgres_data